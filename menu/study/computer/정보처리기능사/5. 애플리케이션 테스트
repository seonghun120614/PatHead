- 응용 소프트웨어의 유형 및 특성 이해
응용 소프트웨어는 불특정 일반인에게 필요한 공통의 기능을 제공하는 상용 소프트웨어와 특정 사용자의 요구사항을 구현하기 위한 서비스 제공 소프트웨어로 구분할 수 있다.

1. 상용 소프트웨어
1) 산업 범용 소프트웨어
가) 시스템 소프트웨어 : 운영체제(임베디드/리얼타임, 모바일, PC/서버 등), DBMS(DataBase Management System), 데이터 통합, 프로그래밍 언어, 스토리지 소프트웨어, 소프트웨어공학 도구, 가상화 소프트웨어, 시스템 보안 소프트웨어 등이 있다.

나) 미들웨어 : 웹 애플리케이션 서버, 실시간 데이터 처리, 연계 통합 솔루션, 분산 병렬 처리, 네트워크 관리, 시스템 관리, 클라우드 서비스, 접근 제어 소프트웨어 등이 있다. ( 클라이언트와 서버 사이의 통제를 미들웨어라함)

다) 응용 소프트웨어 : 영상 인식/분석, 영상 코덱/스트리밍, 영상 저작/편집/합성, 3D 스캐닝/프린팅, 가상시뮬레이션, 콘텐츠 보호/관리/유통, 정보검색, 음성처리, 오피스웨어 소프트웨어 등이 있다.

2) 산업 특화 소프트웨어

- 서비스 제공 소프트웨어의 특성 및 유형

1) 신규 개발 소프트웨어 : 새로운 서비스 제공을 목적으로 개발되며, 일반적으로 초기 개발 단계, 확장 단계, 기능 고도화 단계등으로 진행된다.

2) 기능 개선 소프트웨어 : 기존 서비스 기능에서 사용자의 편의성 개선, 응답 속도 개선, 화면 UI 개선, 업무 프로세스 개선 등의 목적으로 개발되는 소프트웨어이다.

3) 추가 개발 소프트웨어 : 기존 서비스 제공 시스템에 업무 환경의 변화, 산업 환경의 변화, 법/제도의 개정 등으로 인해 새로운 기능을 추가로 개발되는 소프트웨어이다.

4) 시스템 통합 소프트웨어 : 각각 별도로 서비스되는 시스템을 원스톱(One-stop) 서비스 제공을 위해 업무 기능 및 데이터 등을 통합하여 개발하는 소프트웨어이다.


- 테스트 케이스
명세 기반 테스트의 설계 산출물로, 특정한 프로그램의 일부분 또는 경로에 따라 수행하거나, 특정한 요구사항을 준수하는지 확인하기 위해 설계된 입력 값, 실행 조건, 기대결과로 구성된 테스트 항목의 명세서를 말함

- 어플리케이션 테스트 ★
소프트웨어 테스트란 구현된 응용 애플리케이션이나 시스템이 사용자가 요구하는 기능의 동작과 성능, 사용성, 안정성등을 만족하는지 확인하기 위하여 소프트웨어의 결함을 찾아내는 활동을 말함.

- 어플리케이션 테스트의 개념 ★
오류 발견 관점 프로그램에 잠재된 오류를 발견하고 이를 수정하여 올바른 프로그램을 개발하는 활동
오류 예방 관점 프로그램 실행 전에 코드리뷰, 동료검토, 인스펙션등을 통해 오류를 사전에 발견하는 예방 차원의 활동


- 어플리케이션 테스트의 기본 원칙 ★
결함존재 증명 : SW완전성 증명 불가
완벽 테스팅 불가 : 모든 경우의 테스팅이 불가
개발 초기 테스팅 효율적 : 조기 결함 발견/수정 시 수정 대상 대폭 감소
결함집중(Defect Clustring) : 다수의 결함은 소수의 원인, 파레토 법칙(전체 결과의 80%가 전체 원인의 20%에서 일어나는 현상을 가리킴)
살충제 패러독스(Presticide Paradox) : 동일한 테스트 케이스를 반복실행하면 결함을 고칠 수 없다.
테스팅은 정황(Context)에 의존한다. : 비즈니스와 상황에 따라 다르게 수행하여야한다.
오류-부재의 궤변(Absence of Errors Fallacy) : 테스트를 했을때 오류를 발견하지 못했더라도, 해당 애플리케이션이 품질이 높다고 말할 수 없다.

- 어플리케이션 테스트 프로세스

테스트 계획 > 테스트 분석 및 디자인 > 테스트 케이스 및 시나리오 작성 > 테스트 수행 > 테스트 결과 평가 및 리포팅

- 어플리케이션 테스트 산출물
테스트 계획서 : 테스트 케이스 계획서
테스트 케이스 : 테스트를 위한 설계 산출물
테스트 시나리오 : 여러가지 테스트케이스의 집합
테스트 결과서 : 테스트 결과를 정리한 문서

- 어플리케이션 테스트의 유형 ★

프로그램 실행 여부

1. 정적테스트 : 프로그램 실행 없이 소스 코드의 구조를 분석하여 논리적으로 검증하는 테스트로 인스펙션, 코드 검사, 워크스루 등이 있다.

2. 동적테스트 : 프로그램의 실행을 요구하는 테스트로 화이트박스 테스트와 블랙박스 테스트가 있다.

화이트박스 테스트 ★ : 프로그램의 내부 로직(수행 경로 구조, 루프 등)을 보면서 테스트를 수행한다.

블랙박스 테스트 ★ : 프로그램의 외부 사용자 요구사항 명세를 보면서 테스트, 주로 구현된 기능을 테스트한다.


- 테스트에 대한 시각
1. 검증(Verification) : 올바른 제품을 생산하고 있는지 검증
2. 확인(Validation) : 제품이 정상적으로 작동하는지


- 테스트 목적
1. 회복테스트 : 시스템에 고의로 실패를 유도하고 시스템이 정상적으로 복귀하는지 테스트
2. 안전테스트 : 불법적인 소프트웨어가 접근하여 시스템을 파괴하지 못하도록 소스코드 내의 보안적인 결함을 미리 점검하는 테스트
3. 강도테스트 : 시스템에 과다 정보량을 부과하여 과부하 시에도 시스템이 정상적으로 작동되는지를 검증하는 테스트
4. 성능테스트 : 처리하는 업무량, 반응 속도 테스트
5. 구조테스트 : 내부 논리 경로, 복잡도 평가
6. 회귀테스트 : 변경, 수정된 코드에대해 결함 발견 여부 평가
7. 병행테스트 : 변경된 시스템과 기존 시스템에 동일한 데이터를 입력후 비교

- 테스트 종류
1. 명세 기반 테스트 : 주어진 명세를 빠짐없이 구현하고 있는지
2. 구조 기반 테스트 : 소프트웨어 내부 논리 흐름에따라 테스트 케이스를 작성하고 확인하는 테스트
3. 경험 기반 테스트 : 유사 소프트웨어나 유사 기술 평가에서 테스터의 경험을 토대로 직관과 기술 능력을 기반으로 테스트를 수행하는 것

- 테스트 케이스 작성